{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":13205754,"sourceType":"datasetVersion","datasetId":8283189}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport os\nimport cv2\nimport datetime\nimport pandas as pd\n\nfrom matplotlib import pyplot as plt\nfrom sklearn.preprocessing import LabelBinarizer\n\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Input, Dense, Flatten, Conv2D, MaxPooling2D, BatchNormalization, Dropout\nfrom tensorflow.keras.utils import plot_model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.applications import VGG16\nfrom tensorflow.keras.applications.vgg16 import preprocess_input\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nimport tensorflow as tf\nprint(tf.__version__)\n\ndef plot_losses(history):\n    plt.rcParams['figure.figsize'] = [20, 5]\n    f, (ax1, ax2) = plt.subplots(1, 2, sharex=True)\n\n    ax1.set_title('Losses')\n    ax1.set_xlabel('epoch')\n    ax1.legend(loc=\"upper right\")\n    ax1.grid()\n    ax1.plot(history['loss'], label='Training loss')\n    ax1.plot(history['val_loss'], label='Validation loss')\n    ax1.legend()\n\n    ax2.set_title('Accuracy')\n    ax2.set_xlabel('epoch')\n    ax2.legend(loc=\"upper right\")\n    ax2.grid()\n    ax2.plot(history['accuracy'], label='Training accuracy')\n    ax2.plot(history['val_accuracy'], label='Validation accuracy')\n    ax2.legend()\n\n    plt.show()\n\ndef create_submission(test_directory, save= True, preprocess_function= None, family= \"generic\", name= \"model\"):\n    if preprocess_function is not None:\n        tDatagen = ImageDataGenerator(\n            preprocessing_function=preprocess_function\n        )\n    else:\n        tDatagen = ImageDataGenerator(rescale=1./255.)\n    test_datagen = tDatagen.flow_from_directory(\n        test_directory,\n        target_size=target_size,\n        batch_size=batch_size,\n        class_mode='categorical',\n        shuffle=False #To mantain order and being able to metric\n    )\n    preds = model.predict(test_datagen)\n    filenames = [os.path.basename(f) for f in test_datagen.filenames]  \n    pred_indices = np.argmax(preds, axis=1)\n    class_labels = {v: k for k, v in train_generator.class_indices.items()}\n    pred_classes = [class_labels[i] for i in pred_indices]\n    submissions = pd.DataFrame({\n        \"id\": filenames,\n        \"category\": pred_classes\n    })\n    submissions.set_index('id',inplace=True)\n    os.makedirs(\"submissions\", exist_ok=True)\n    timestamp = datetime.datetime.now().strftime(\"%m_%d_%H:%M\")\n    submission_path = f\"submissions/{family}_{name}_{timestamp}.csv\"\n    if save:\n        submissions.to_csv(submission_path)\n    return submissions","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-30T19:41:14.842317Z","iopub.execute_input":"2025-09-30T19:41:14.842596Z","iopub.status.idle":"2025-09-30T19:41:14.853618Z","shell.execute_reply.started":"2025-09-30T19:41:14.842576Z","shell.execute_reply":"2025-09-30T19:41:14.852852Z"}},"outputs":[{"name":"stdout","text":"2.18.0\n","output_type":"stream"}],"execution_count":14},{"cell_type":"markdown","source":"### Under and Oversampling","metadata":{}},{"cell_type":"code","source":"from sklearn.utils.class_weight import compute_class_weight\nimport numpy as np\n\ndef get_class_weights(generator):\n    \"\"\"\n    Compute class weights for imbalanced datasets when using flow_from_directory.\n    \n    Args:\n        generator: Keras ImageDataGenerator.flow_from_directory object (train_generator)\n    \n    Returns:\n        dict mapping class index -> weight\n    \"\"\"\n    class_indices = generator.class_indices\n    classes = np.unique(generator.classes)\n    \n    class_weights = compute_class_weight(\n        class_weight=\"balanced\",\n        classes=classes,\n        y=generator.classes\n    )\n    \n    return dict(zip(classes, class_weights))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T17:47:55.835699Z","iopub.execute_input":"2025-09-30T17:47:55.836182Z","iopub.status.idle":"2025-09-30T17:47:55.840611Z","shell.execute_reply.started":"2025-09-30T17:47:55.836163Z","shell.execute_reply":"2025-09-30T17:47:55.839945Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"### Hiperparameters","metadata":{}},{"cell_type":"code","source":"target_size = (250, 250)\nbatch_size = 128\ndata_dir = '/kaggle/input/animalprediction/mg-animal-prediction-25-26/train_images'\n\n## For model save\nfamily = \"Transfer\"\nname = \"main\"\nmodel_path = None","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T17:47:55.841423Z","iopub.execute_input":"2025-09-30T17:47:55.841674Z","iopub.status.idle":"2025-09-30T17:47:55.861034Z","shell.execute_reply.started":"2025-09-30T17:47:55.841650Z","shell.execute_reply":"2025-09-30T17:47:55.860277Z"}},"outputs":[],"execution_count":3},{"cell_type":"markdown","source":"### Model","metadata":{}},{"cell_type":"code","source":"vgg16 = VGG16(weights='imagenet',include_top = False, input_shape=(target_size[0], target_size[1], 3))\n\nmodel = Sequential()\nmodel.add(vgg16)\nmodel.add(Flatten())\nmodel.add(Dense(512, activation=\"relu\"))\nmodel.add(Dense(256, activation=\"relu\"))\nmodel.add(Dropout(0.1))\nmodel.add(Dense(128, activation=\"relu\"))\nmodel.add(Dense(10, activation=\"softmax\"))\nfor layer in vgg16.layers[:13]:\n    layer.trainable = False\nprint(model.summary())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T17:47:55.862155Z","iopub.execute_input":"2025-09-30T17:47:55.862384Z","iopub.status.idle":"2025-09-30T17:48:01.635435Z","shell.execute_reply.started":"2025-09-30T17:47:55.862360Z","shell.execute_reply":"2025-09-30T17:48:01.634857Z"}},"outputs":[{"name":"stderr","text":"I0000 00:00:1759254476.766479      36 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n","output_type":"stream"},{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n\u001b[1m58889256/58889256\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 0us/step\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ vgg16 (\u001b[38;5;33mFunctional\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m512\u001b[0m)      │    \u001b[38;5;34m14,714,688\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m25088\u001b[0m)          │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │    \u001b[38;5;34m12,845,568\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │       \u001b[38;5;34m131,328\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │        \u001b[38;5;34m32,896\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)             │         \u001b[38;5;34m1,290\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ vgg16 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)      │    <span style=\"color: #00af00; text-decoration-color: #00af00\">14,714,688</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">25088</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │    <span style=\"color: #00af00; text-decoration-color: #00af00\">12,845,568</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">131,328</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,896</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,290</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m27,725,770\u001b[0m (105.77 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">27,725,770</span> (105.77 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m22,450,314\u001b[0m (85.64 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">22,450,314</span> (85.64 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m5,275,456\u001b[0m (20.12 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">5,275,456</span> (20.12 MB)\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"None\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"# We create a generator to enrich data\ndatagen = ImageDataGenerator(\n    preprocessing_function=preprocess_input,\n    validation_split=0.2,  # 20% for validation\n    rotation_range=25,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    zoom_range=0.4,\n    horizontal_flip=True,\n    fill_mode='nearest'\n)\n\ntrain_generator = datagen.flow_from_directory(\n    data_dir,\n    target_size=target_size,\n    batch_size=batch_size,\n    class_mode='categorical',\n    subset='training',\n    seed=2004\n)\n\nvalidation_generator = datagen.flow_from_directory(\n    data_dir,\n    target_size=target_size,\n    batch_size=batch_size,\n    class_mode='categorical',\n    subset='validation',\n    seed=2004\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T17:48:01.636960Z","iopub.execute_input":"2025-09-30T17:48:01.637169Z","iopub.status.idle":"2025-09-30T17:48:11.363128Z","shell.execute_reply.started":"2025-09-30T17:48:01.637153Z","shell.execute_reply":"2025-09-30T17:48:11.362527Z"}},"outputs":[{"name":"stdout","text":"Found 16947 images belonging to 10 classes.\nFound 4232 images belonging to 10 classes.\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"opt = keras.optimizers.Adam(learning_rate=1e-4)\nmodel.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\nprint(get_class_weights(train_generator))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T17:48:11.363820Z","iopub.execute_input":"2025-09-30T17:48:11.364083Z","iopub.status.idle":"2025-09-30T17:48:11.383740Z","shell.execute_reply.started":"2025-09-30T17:48:11.364065Z","shell.execute_reply":"2025-09-30T17:48:11.383223Z"}},"outputs":[{"name":"stdout","text":"{0: 0.48544829561730163, 1: 0.9974690994702766, 2: 2.2387054161162485, 3: 1.313720930232558, 4: 0.8151515151515152, 5: 1.8125133689839572, 6: 1.5505032021957914, 7: 1.6048295454545454, 8: 0.49022273647671394, 9: 1.5547706422018348}\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"history = model.fit(\ntrain_generator,\nepochs = 20,\nvalidation_data = validation_generator,\nverbose = 1,\nclass_weight=get_class_weights(train_generator))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T17:48:11.384476Z","iopub.execute_input":"2025-09-30T17:48:11.384674Z","iopub.status.idle":"2025-09-30T19:37:50.674076Z","shell.execute_reply.started":"2025-09-30T17:48:11.384658Z","shell.execute_reply":"2025-09-30T19:37:50.673508Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n  self._warn_if_super_not_called()\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/20\n","output_type":"stream"},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1759254502.892820      92 service.cc:148] XLA service 0x7832a8006010 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\nI0000 00:00:1759254502.893803      92 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\nI0000 00:00:1759254503.497247      92 cuda_dnn.cc:529] Loaded cuDNN version 90300\n2025-09-30 17:48:32.748963: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng11{k2=1,k3=0} for conv (f32[128,64,250,250]{3,2,1,0}, u8[0]{0}) custom-call(f32[128,64,250,250]{3,2,1,0}, f32[64,64,3,3]{3,2,1,0}, f32[64]{0}), window={size=3x3 pad=1_1x1_1}, dim_labels=bf01_oi01->bf01, custom_call_target=\"__cudnn$convBiasActivationForward\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kRelu\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n2025-09-30 17:48:32.814458: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.065612116s\nTrying algorithm eng11{k2=1,k3=0} for conv (f32[128,64,250,250]{3,2,1,0}, u8[0]{0}) custom-call(f32[128,64,250,250]{3,2,1,0}, f32[64,64,3,3]{3,2,1,0}, f32[64]{0}), window={size=3x3 pad=1_1x1_1}, dim_labels=bf01_oi01->bf01, custom_call_target=\"__cudnn$convBiasActivationForward\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kRelu\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n2025-09-30 17:48:40.544686: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng36{k2=4,k3=0} for conv (f32[128,128,125,125]{3,2,1,0}, u8[0]{0}) custom-call(f32[128,128,125,125]{3,2,1,0}, f32[128,128,3,3]{3,2,1,0}, f32[128]{0}), window={size=3x3 pad=1_1x1_1}, dim_labels=bf01_oi01->bf01, custom_call_target=\"__cudnn$convBiasActivationForward\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kRelu\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\n2025-09-30 17:48:40.629480: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.084914452s\nTrying algorithm eng36{k2=4,k3=0} for conv (f32[128,128,125,125]{3,2,1,0}, u8[0]{0}) custom-call(f32[128,128,125,125]{3,2,1,0}, f32[128,128,3,3]{3,2,1,0}, f32[128]{0}), window={size=3x3 pad=1_1x1_1}, dim_labels=bf01_oi01->bf01, custom_call_target=\"__cudnn$convBiasActivationForward\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kRelu\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]} is taking a while...\nI0000 00:00:1759254549.586645      92 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m468s\u001b[0m 3s/step - accuracy: 0.3247 - loss: 2.4063 - val_accuracy: 0.7802 - val_loss: 0.6535\nEpoch 2/20\n\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m332s\u001b[0m 3s/step - accuracy: 0.7985 - loss: 0.6243 - val_accuracy: 0.8495 - val_loss: 0.4728\nEpoch 3/20\n\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m321s\u001b[0m 2s/step - accuracy: 0.8695 - loss: 0.4166 - val_accuracy: 0.8845 - val_loss: 0.3712\nEpoch 4/20\n\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m316s\u001b[0m 2s/step - accuracy: 0.8946 - loss: 0.3251 - val_accuracy: 0.9116 - val_loss: 0.2717\nEpoch 5/20\n\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m316s\u001b[0m 2s/step - accuracy: 0.9125 - loss: 0.2888 - val_accuracy: 0.9116 - val_loss: 0.2842\nEpoch 6/20\n\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m316s\u001b[0m 2s/step - accuracy: 0.9247 - loss: 0.2403 - val_accuracy: 0.9291 - val_loss: 0.2405\nEpoch 7/20\n\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m317s\u001b[0m 2s/step - accuracy: 0.9315 - loss: 0.2034 - val_accuracy: 0.9223 - val_loss: 0.2532\nEpoch 8/20\n\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m318s\u001b[0m 2s/step - accuracy: 0.9372 - loss: 0.2013 - val_accuracy: 0.9230 - val_loss: 0.2501\nEpoch 9/20\n\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m318s\u001b[0m 2s/step - accuracy: 0.9445 - loss: 0.1755 - val_accuracy: 0.9258 - val_loss: 0.2429\nEpoch 10/20\n\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m321s\u001b[0m 2s/step - accuracy: 0.9457 - loss: 0.1566 - val_accuracy: 0.9178 - val_loss: 0.2671\nEpoch 11/20\n\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m322s\u001b[0m 2s/step - accuracy: 0.9407 - loss: 0.1717 - val_accuracy: 0.9317 - val_loss: 0.2297\nEpoch 12/20\n\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m324s\u001b[0m 2s/step - accuracy: 0.9534 - loss: 0.1284 - val_accuracy: 0.9445 - val_loss: 0.1922\nEpoch 13/20\n\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m322s\u001b[0m 2s/step - accuracy: 0.9532 - loss: 0.1327 - val_accuracy: 0.9390 - val_loss: 0.2258\nEpoch 14/20\n\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m323s\u001b[0m 2s/step - accuracy: 0.9559 - loss: 0.1259 - val_accuracy: 0.9435 - val_loss: 0.2129\nEpoch 15/20\n\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m321s\u001b[0m 2s/step - accuracy: 0.9627 - loss: 0.1207 - val_accuracy: 0.9416 - val_loss: 0.2109\nEpoch 16/20\n\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m323s\u001b[0m 2s/step - accuracy: 0.9661 - loss: 0.0930 - val_accuracy: 0.9416 - val_loss: 0.2099\nEpoch 17/20\n\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m335s\u001b[0m 3s/step - accuracy: 0.9672 - loss: 0.1017 - val_accuracy: 0.9409 - val_loss: 0.2012\nEpoch 18/20\n\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m328s\u001b[0m 2s/step - accuracy: 0.9649 - loss: 0.1091 - val_accuracy: 0.9364 - val_loss: 0.2352\nEpoch 19/20\n\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m317s\u001b[0m 2s/step - accuracy: 0.9671 - loss: 0.0959 - val_accuracy: 0.9402 - val_loss: 0.2182\nEpoch 20/20\n\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m317s\u001b[0m 2s/step - accuracy: 0.9660 - loss: 0.1017 - val_accuracy: 0.9433 - val_loss: 0.1941\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"plot_losses(history.history)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T19:37:50.675048Z","iopub.execute_input":"2025-09-30T19:37:50.675272Z","iopub.status.idle":"2025-09-30T19:37:51.084543Z","shell.execute_reply.started":"2025-09-30T19:37:50.675254Z","shell.execute_reply":"2025-09-30T19:37:51.083909Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 2000x500 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"# Current timestamp\ntimestamp = datetime.datetime.now().strftime(\"%m_%d_%H:%M\")\n## Make sure everything saves correctly\nos.makedirs(\"models\", exist_ok=True)\ntry:\n    family = family\nexcept:\n    family= \"Transfer\"\ntry:\n    name = name\nexcept:\n    name= \"main\"\nmodel_path = f\"models/{family}_{name}_{timestamp}.keras\"\n\n# Save the model\nmodel.save(model_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T19:39:50.029602Z","iopub.execute_input":"2025-09-30T19:39:50.030278Z","iopub.status.idle":"2025-09-30T19:39:51.212472Z","shell.execute_reply.started":"2025-09-30T19:39:50.030255Z","shell.execute_reply":"2025-09-30T19:39:51.211848Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"create_submission(\"/kaggle/input/animalprediction/mg-animal-prediction-25-26/test_images\", preprocess_function= preprocess_input, family=family, name=name)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-30T19:41:30.895282Z","iopub.execute_input":"2025-09-30T19:41:30.895809Z","iopub.status.idle":"2025-09-30T19:41:54.145779Z","shell.execute_reply.started":"2025-09-30T19:41:30.895784Z","shell.execute_reply":"2025-09-30T19:41:54.145041Z"}},"outputs":[{"name":"stdout","text":"Found 5000 images belonging to 1 classes.\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n  self._warn_if_super_not_called()\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 477ms/step\n","output_type":"stream"},{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"             category\nid                   \n0.jpeg     scoiattolo\n1.jpeg        cavallo\n10.jpeg    scoiattolo\n100.jpeg       pecora\n1000.jpeg     cavallo\n...               ...\n995.jpeg      cavallo\n996.jpeg       pecora\n997.jpeg         cane\n998.jpeg        ragno\n999.jpeg   scoiattolo\n\n[5000 rows x 1 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>category</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0.jpeg</th>\n      <td>scoiattolo</td>\n    </tr>\n    <tr>\n      <th>1.jpeg</th>\n      <td>cavallo</td>\n    </tr>\n    <tr>\n      <th>10.jpeg</th>\n      <td>scoiattolo</td>\n    </tr>\n    <tr>\n      <th>100.jpeg</th>\n      <td>pecora</td>\n    </tr>\n    <tr>\n      <th>1000.jpeg</th>\n      <td>cavallo</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>995.jpeg</th>\n      <td>cavallo</td>\n    </tr>\n    <tr>\n      <th>996.jpeg</th>\n      <td>pecora</td>\n    </tr>\n    <tr>\n      <th>997.jpeg</th>\n      <td>cane</td>\n    </tr>\n    <tr>\n      <th>998.jpeg</th>\n      <td>ragno</td>\n    </tr>\n    <tr>\n      <th>999.jpeg</th>\n      <td>scoiattolo</td>\n    </tr>\n  </tbody>\n</table>\n<p>5000 rows × 1 columns</p>\n</div>"},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}